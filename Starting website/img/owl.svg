<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><circle r="256" cx="256" cy="256" fill="#000000" shape="circle" transform="matrix(1,0,0,1,0,0)"/><g transform="matrix(0.64,1.5675479029086123e-16,-1.5675479029086123e-16,0.64,92.15998901367189,92.16000137329095)"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><path d="m512 511.973v-30h-86.796v-354.456c0-29.356-9.979-56.422-26.715-77.996 24.22-3.441 42.908-24.303 42.908-49.458h-30c0 11.009-8.957 19.966-19.966 19.966h-14.917c-3.286 0-6.544.118-9.772.349-19.907-12.87-43.609-20.351-69.027-20.351h-83.445c-25.418 0-49.12 7.481-69.027 20.351-3.228-.231-6.486-.349-9.772-.349h-14.917c-11.009 0-19.966-8.957-19.966-19.966h-30c0 25.155 18.688 46.017 42.908 49.458-16.737 21.574-26.716 48.64-26.716 77.996v147.089c0 63.403 24.69 123.012 69.523 167.844 15.72 15.72 33.261 28.952 52.141 39.523h-208.444v30zm-116.796-98.75c-21.948-6.487-38.014-26.817-38.014-50.839v-26.138h-30v26.138c0 40.65 29.379 74.547 68.014 81.63v37.017c-58.586-7.398-104.043-57.54-104.043-118.101v-84.902c42.489-4.904 79.684-27.445 104.043-60.103zm-180.934-383.196h83.444c7.565 0 14.931.866 22.005 2.505-27.416 12.708-49.909 34.302-63.727 61.08-13.818-26.778-36.311-48.372-63.727-61.08 7.074-1.639 14.44-2.505 22.005-2.505zm-61.008 21.509c49.742 8.482 87.73 51.892 87.73 104.014v34.837h30v-34.837c0-52.122 37.988-95.532 87.73-104.014 22.228 17.884 36.482 45.297 36.482 75.981 0 67.01-54.516 121.525-121.526 121.525h-35.372c-67.01 0-121.526-54.516-121.526-121.525 0-30.684 14.254-58.097 36.482-75.981zm-36.482 223.07v-56.681c27.648 37.069 71.831 61.117 121.526 61.117h22.855v83.888c0 48.562 23.349 91.769 59.407 118.998-112.697-1.919-203.788-94.176-203.788-207.322z" fill="#14b95d" data-original="#000000" style="" class=""/><path d="m330.741 167.302c14.584 0 26.449-11.864 26.449-26.448s-11.865-26.449-26.449-26.449-26.449 11.865-26.449 26.449 11.865 26.448 26.449 26.448z" fill="#14b95d" data-original="#000000" style="" class=""/><path d="m181.243 167.302c14.584 0 26.449-11.864 26.449-26.448s-11.865-26.449-26.449-26.449-26.449 11.865-26.449 26.449 11.865 26.448 26.449 26.448z" fill="#14b95d" data-original="#000000" style="" class=""/></g></g></svg>
